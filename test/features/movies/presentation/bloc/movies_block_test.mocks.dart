// Mocks generated by Mockito 5.4.4 from annotations
// in cinema_club/test/features/movies/presentation/bloc/movies_block_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cinema_club/core/errors/failures.dart' as _i6;
import 'package:cinema_club/features/getmovies/domain/entities/movies.dart'
    as _i7;
import 'package:cinema_club/features/getmovies/domain/repositories/movie_repository.dart'
    as _i2;
import 'package:cinema_club/features/getmovies/domain/usecases/find_movie_by_id.dart'
    as _i11;
import 'package:cinema_club/features/getmovies/domain/usecases/get_moives.dart'
    as _i4;
import 'package:cinema_club/features/getmovies/domain/usecases/get_popular_movies.dart'
    as _i9;
import 'package:cinema_club/features/getmovies/domain/usecases/get_top_rated_movies.dart'
    as _i8;
import 'package:cinema_club/features/getmovies/domain/usecases/get_upcoming_movies.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetMoives].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoives extends _i1.Mock implements _i4.GetMoives {
  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
        returnValueForMissingStub: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>> getAllMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllMovies,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getAllMovies,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getAllMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i8.GetTopRatedMovies {
  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
        returnValueForMissingStub: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  set movieRepository(_i2.MovieRepository? _movieRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #movieRepository,
          _movieRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>> getTopRatedMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i9.GetPopularMovies {
  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
        returnValueForMissingStub: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  set movieRepository(_i2.MovieRepository? _movieRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #movieRepository,
          _movieRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>> getPopularMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>);
}

/// A class which mocks [GetUpcomingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUpcomingMovies extends _i1.Mock implements _i10.GetUpcomingMovies {
  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
        returnValueForMissingStub: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>> getUpcomingMovies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpcomingMovies,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getUpcomingMovies,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>.value(
                _FakeEither_1<_i6.Failures, List<_i7.Movies>>(
          this,
          Invocation.method(
            #getUpcomingMovies,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failures, List<_i7.Movies>>>);
}

/// A class which mocks [FindMovieById].
///
/// See the documentation for Mockito's code generation for more information.
class MockFindMovieById extends _i1.Mock implements _i11.FindMovieById {
  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
        returnValueForMissingStub: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failures, _i7.Movies>> findMovieById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #findMovieById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failures, _i7.Movies>>.value(
            _FakeEither_1<_i6.Failures, _i7.Movies>(
          this,
          Invocation.method(
            #findMovieById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failures, _i7.Movies>>.value(
                _FakeEither_1<_i6.Failures, _i7.Movies>(
          this,
          Invocation.method(
            #findMovieById,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failures, _i7.Movies>>);
}
