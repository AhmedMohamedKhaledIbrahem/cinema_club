// Mocks generated by Mockito 5.4.4 from annotations
// in cinema_club/test/features/moviesearch/presentation/bloc/movie_search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cinema_club/core/errors/failures.dart' as _i6;
import 'package:cinema_club/features/geners/domain/entities/genresEntities.dart'
    as _i8;
import 'package:cinema_club/features/moivesearch/domain/entities/movie_search_Entity.dart'
    as _i7;
import 'package:cinema_club/features/moivesearch/domain/repositories/movie_search_repository.dart'
    as _i2;
import 'package:cinema_club/features/moivesearch/domain/usecases/movie_search_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieSearchRepository_0 extends _i1.SmartFake
    implements _i2.MovieSearchRepository {
  _FakeMovieSearchRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieSearchUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieSearchUsecase extends _i1.Mock
    implements _i4.MovieSearchUsecase {
  @override
  _i2.MovieSearchRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieSearchRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeMovieSearchRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MovieSearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failures, List<_i7.MovieSearchEntity>>> movieSearch(
    String? query,
    List<_i8.GenresEntities>? generes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #movieSearch,
          [
            query,
            generes,
          ],
        ),
        returnValue: _i5.Future<
                _i3.Either<_i6.Failures, List<_i7.MovieSearchEntity>>>.value(
            _FakeEither_1<_i6.Failures, List<_i7.MovieSearchEntity>>(
          this,
          Invocation.method(
            #movieSearch,
            [
              query,
              generes,
            ],
          ),
        )),
        returnValueForMissingStub: _i5.Future<
                _i3.Either<_i6.Failures, List<_i7.MovieSearchEntity>>>.value(
            _FakeEither_1<_i6.Failures, List<_i7.MovieSearchEntity>>(
          this,
          Invocation.method(
            #movieSearch,
            [
              query,
              generes,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failures, List<_i7.MovieSearchEntity>>>);
}
